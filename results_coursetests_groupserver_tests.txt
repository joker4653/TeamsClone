============================= test session starts ==============================
platform linux -- Python 3.7.3, pytest-6.2.5, py-1.10.0, pluggy-1.0.0 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/tmp_amd/kamen/export/kamen/3/cs1531/project-automarking/tempstore/.hypothesis/examples')
rootdir: /tmp_amd/kamen/export/kamen/3/cs1531/project-automarking/tempstore, configfile: pytest.ini
plugins: forked-1.3.0, xdist-2.2.1, hypothesis-6.1.1, timeout-1.4.2
collecting ... collected 374 items

http_tests/admin_tests/test_admin_user_remove.py::test_once_removed_user_cant_do_anything PASSED [  0%]
http_tests/admin_tests/test_admin_user_remove.py::test_messages_after_user_removal_correct_format PASSED [  0%]
http_tests/admin_tests/test_admin_user_remove.py::test_removed_profile_still_fetchable_with_user_profile PASSED [  0%]
http_tests/admin_tests/test_admin_user_remove.py::test_removal_removed_from_channel PASSED [  1%]
http_tests/admin_tests/test_admin_user_remove.py::test_removal_removed_from_dm PASSED [  1%]
http_tests/admin_tests/test_admin_user_remove.py::test_removal_not_in_users_all PASSED [  1%]
http_tests/admin_tests/test_admin_user_remove.py::test_email_reusable PASSED [  1%]
http_tests/admin_tests/test_admin_user_remove.py::test_handle_reusable PASSED [  2%]
http_tests/admin_tests/test_admin_user_remove.py::test_invalid_user PASSED [  2%]
http_tests/admin_tests/test_admin_user_remove.py::test_cannot_remove_last_owner PASSED [  2%]
http_tests/admin_tests/test_admin_user_remove.py::test_cannot_remove_user_nonowner PASSED [  2%]
http_tests/admin_tests/test_admin_user_remove.py::test_invalid_token PASSED [  3%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_successful_permission_change FAILED [  3%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_cannot_demote_last_owner PASSED [  3%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_nonowner_cant_change_permissions PASSED [  4%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_user PASSED [  4%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_permission PASSED [  4%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_same_permission PASSED [  4%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_token PASSED [  5%]
http_tests/auth_tests/test_auth_login.py::test_successful_login PASSED   [  5%]
http_tests/auth_tests/test_auth_login.py::test_can_have_two_sessions PASSED [  5%]
http_tests/auth_tests/test_auth_login.py::test_unregistered_user PASSED  [  5%]
http_tests/auth_tests/test_auth_login.py::test_registered_but_incorrect_password PASSED [  6%]
http_tests/auth_tests/test_auth_logout.py::test_successful_logout PASSED [  6%]
http_tests/auth_tests/test_auth_logout.py::test_accesserror_when_already_logged_out PASSED [  6%]
http_tests/auth_tests/test_auth_register.py::test_invalid_email[@gmail.com] PASSED [  6%]
http_tests/auth_tests/test_auth_register.py::test_invalid_email[bob] PASSED [  7%]
http_tests/auth_tests/test_auth_register.py::test_invalid_email[bob@bob@bob.com] PASSED [  7%]
http_tests/auth_tests/test_auth_register.py::test_invalid_password[12345] PASSED [  7%]
http_tests/auth_tests/test_auth_register.py::test_invalid_password[] PASSED [  8%]
http_tests/auth_tests/test_auth_register.py::test_invalid_name_first[] PASSED [  8%]
http_tests/auth_tests/test_auth_register.py::test_invalid_name_first[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] PASSED [  8%]
http_tests/auth_tests/test_auth_register.py::test_invalid_name_last[] PASSED [  8%]
http_tests/auth_tests/test_auth_register.py::test_invalid_name_last[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb] PASSED [  9%]
http_tests/auth_tests/test_auth_register.py::test_duplicate_email PASSED [  9%]
http_tests/auth_tests/test_auth_register.py::test_removed_user_name PASSED [  9%]
http_tests/auth_tests/test_auth_register.py::test_successful_registration PASSED [  9%]
http_tests/auth_tests/test_auth_register.py::test_basic_handle_generated_correctly[Bob-Smith-bobsmith] PASSED [ 10%]
http_tests/auth_tests/test_auth_register.py::test_basic_handle_generated_correctly[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd] PASSED [ 10%]
http_tests/auth_tests/test_auth_register.py::test_duplicate_handles_generated_correctly[abcdefghij-klmnopqrs-abcdefghijklmnopqrs-abcdefghij-klmnopqrs-abcdefghijklmnopqrs0] PASSED [ 10%]
http_tests/auth_tests/test_auth_register.py::test_duplicate_handles_generated_correctly[abcdefghij-klmnopqrst-abcdefghijklmnopqrst-abcdefghij-klmnopqrst-abcdefghijklmnopqrst0] PASSED [ 10%]
http_tests/auth_tests/test_auth_register.py::test_duplicate_handles_generated_correctly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0] PASSED [ 11%]
http_tests/auth_tests/test_auth_register.py::test_duplicate_handles_generated_correctly[abc-def0-abcdef0-abc-def-abcdef1] PASSED [ 11%]
http_tests/auth_tests/test_passwordreset_request.py::test_return_format_correct FAILED [ 11%]
http_tests/auth_tests/test_passwordreset_request.py::test_password_request_logs_out_everywhere PASSED [ 12%]
http_tests/auth_tests/test_passwordreset_reset.py::test_invalid_password PASSED [ 12%]
http_tests/channel_tests/test_channel_addowner.py::test_channel_owner_can_addowner_when_member PASSED [ 12%]
http_tests/channel_tests/test_channel_addowner.py::test_global_owner_member_can_addowner PASSED [ 12%]
http_tests/channel_tests/test_channel_addowner.py::test_channel_owner_cant_addowner_when_non_member PASSED [ 13%]
http_tests/channel_tests/test_channel_addowner.py::test_non_member_cannot_add_owner FAILED [ 13%]
http_tests/channel_tests/test_channel_addowner.py::test_global_owner_non_member_cant_addowner_private FAILED [ 13%]
http_tests/channel_tests/test_channel_addowner.py::test_global_owner_non_member_cant_addowner_public FAILED [ 13%]
http_tests/channel_tests/test_channel_addowner.py::test_member_cannot_add_owner PASSED [ 14%]
http_tests/channel_tests/test_channel_addowner.py::test_cannot_addowner_prexisting_channel_owner PASSED [ 14%]
http_tests/channel_tests/test_channel_addowner.py::test_with_invalid_u_id PASSED [ 14%]
http_tests/channel_tests/test_channel_addowner.py::test_with_invalid_channel_id PASSED [ 14%]
http_tests/channel_tests/test_channel_addowner.py::test_invalid_token PASSED [ 15%]
http_tests/channel_tests/test_channel_details.py::test_member_successful PASSED [ 15%]
http_tests/channel_tests/test_channel_details.py::test_non_member_not_successful PASSED [ 15%]
http_tests/channel_tests/test_channel_details.py::test_invalid_channel_id PASSED [ 16%]
http_tests/channel_tests/test_channel_details.py::test_invalid_token PASSED [ 16%]
http_tests/channel_tests/test_channel_invite.py::test_duplicate_invite PASSED [ 16%]
http_tests/channel_tests/test_channel_invite.py::test_invite_global_owner PASSED [ 16%]
http_tests/channel_tests/test_channel_invite.py::test_invite_global_member PASSED [ 17%]
http_tests/channel_tests/test_channel_invite.py::test_invitation_from_non_channel_member PASSED [ 17%]
http_tests/channel_tests/test_channel_invite.py::test_channel_id_invalid PASSED [ 17%]
http_tests/channel_tests/test_channel_invite.py::test_u_id_invalid PASSED [ 17%]
http_tests/channel_tests/test_channel_invite.py::test_invalidated_token PASSED [ 18%]
http_tests/channel_tests/test_channel_join.py::test_global_owner_join_channel_public PASSED [ 18%]
http_tests/channel_tests/test_channel_join.py::test_global_owner_join_channel_private PASSED [ 18%]
http_tests/channel_tests/test_channel_join.py::test_global_member_join_public PASSED [ 18%]
http_tests/channel_tests/test_channel_join.py::test_global_member_cant_join_private PASSED [ 19%]
http_tests/channel_tests/test_channel_join.py::test_already_joined_channel PASSED [ 19%]
http_tests/channel_tests/test_channel_join.py::test_join_invalid_channel_id PASSED [ 19%]
http_tests/channel_tests/test_channel_join.py::test_invalidated_token PASSED [ 20%]
http_tests/channel_tests/test_channel_leave.py::test_member_leave_channel_successfully PASSED [ 20%]
http_tests/channel_tests/test_channel_leave.py::test_leave_channel_when_not_member PASSED [ 20%]
http_tests/channel_tests/test_channel_leave.py::test_invalid_channel_id PASSED [ 20%]
http_tests/channel_tests/test_channel_leave.py::test_invalid_token PASSED [ 21%]
http_tests/channel_tests/test_channel_messages.py::test_message_timestamp PASSED [ 21%]
http_tests/channel_tests/test_channel_messages.py::test_under_fifty_messages_sent PASSED [ 21%]
http_tests/channel_tests/test_channel_messages.py::test_over_fifty_messages_sent PASSED [ 21%]
http_tests/channel_tests/test_channel_messages.py::test_removal_by_edit_reflected PASSED [ 22%]
http_tests/channel_tests/test_channel_messages.py::test_removal_by_deletion_reflected PASSED [ 22%]
http_tests/channel_tests/test_channel_messages.py::test_input_error_when_start_greater_than_message_num PASSED [ 22%]
http_tests/channel_tests/test_channel_messages.py::test_access_error_when_user_is_non_member PASSED [ 22%]
http_tests/channel_tests/test_channel_messages.py::test_input_error_when_channel_id_invalid PASSED [ 23%]
http_tests/channel_tests/test_channel_messages.py::test_access_error_when_invalid_token_given PASSED [ 23%]
http_tests/channel_tests/test_channel_removeowner.py::test_owner_can_remove_owner PASSED [ 23%]
http_tests/channel_tests/test_channel_removeowner.py::test_global_owner_member_can_remove_owner PASSED [ 24%]
http_tests/channel_tests/test_channel_removeowner.py::test_global_owner_nonmember_cannot_remove_owner PASSED [ 24%]
http_tests/channel_tests/test_channel_removeowner.py::test_nonmember_cannot_remove_owner PASSED [ 24%]
http_tests/channel_tests/test_channel_removeowner.py::test_member_cannot_remove_owner PASSED [ 24%]
http_tests/channel_tests/test_channel_removeowner.py::test_cannot_remove_last_owner PASSED [ 25%]
http_tests/channel_tests/test_channel_removeowner.py::test_global_owner_cannot_remove_only_owner PASSED [ 25%]
http_tests/channel_tests/test_channel_removeowner.py::test_cannot_remove_non_owner PASSED [ 25%]
http_tests/channel_tests/test_channel_removeowner.py::test_invalid_u_id PASSED [ 25%]
http_tests/channel_tests/test_channel_removeowner.py::test_with_invalid_channel_id PASSED [ 26%]
http_tests/channel_tests/test_channel_removeowner.py::test_invalidated_token PASSED [ 26%]
http_tests/channels_tests/test_channels_create.py::test_create_channel[True-andys room] PASSED [ 26%]
http_tests/channels_tests/test_channels_create.py::test_create_channel[False-andys room] PASSED [ 27%]
http_tests/channels_tests/test_channels_create.py::test_invalid_channel_name_length[True-] PASSED [ 27%]
http_tests/channels_tests/test_channels_create.py::test_invalid_channel_name_length[True-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] PASSED [ 27%]
http_tests/channels_tests/test_channels_create.py::test_invalid_channel_name_length[False-] PASSED [ 27%]
http_tests/channels_tests/test_channels_create.py::test_invalid_channel_name_length[False-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] PASSED [ 28%]
http_tests/channels_tests/test_channels_create.py::test_invalidated_token PASSED [ 28%]
http_tests/channels_tests/test_channels_list.py::test_when_in_no_channels PASSED [ 28%]
http_tests/channels_tests/test_channels_list.py::test_when_in_one_channel[True-andy] PASSED [ 28%]
http_tests/channels_tests/test_channels_list.py::test_when_in_one_channel[False-andy] PASSED [ 29%]
http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[False-True-ZERG-andy] PASSED [ 29%]
http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[False-False-ZERG-andy] PASSED [ 29%]
http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[True-True-ZERG-andy] PASSED [ 29%]
http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[True-False-ZERG-andy] PASSED [ 30%]
http_tests/channels_tests/test_channels_list.py::test_list_after_leave_channel PASSED [ 30%]
http_tests/channels_tests/test_channels_list.py::test_invalidated_token PASSED [ 30%]
http_tests/channels_tests/test_channels_listall.py::test_when_no_channels PASSED [ 31%]
http_tests/channels_tests/test_channels_listall.py::test_when_one_channel_exists_private PASSED [ 31%]
http_tests/channels_tests/test_channels_listall.py::test_when_one_channel_exists_public PASSED [ 31%]
http_tests/channels_tests/test_channels_listall.py::test_when_multiple_channels_exist PASSED [ 31%]
http_tests/channels_tests/test_channels_listall.py::test_invalidated_token PASSED [ 32%]
http_tests/dm_tests/test_dm_create.py::test_successful_dm_creation PASSED [ 32%]
http_tests/dm_tests/test_dm_create.py::test_dm_name_creation_single PASSED [ 32%]
http_tests/dm_tests/test_dm_create.py::test_dm_name_creation_multiple PASSED [ 32%]
http_tests/dm_tests/test_dm_create.py::test_dm_to_invalid_users PASSED   [ 33%]
http_tests/dm_tests/test_dm_create.py::test_dm_to_users_but_one_invalid PASSED [ 33%]
http_tests/dm_tests/test_dm_create.py::test_dm_to_users_but_duplicate PASSED [ 33%]
http_tests/dm_tests/test_dm_create.py::test_invalid_token PASSED         [ 33%]
http_tests/dm_tests/test_dm_details.py::test_member_successful PASSED    [ 34%]
http_tests/dm_tests/test_dm_details.py::test_non_member_not_successful PASSED [ 34%]
http_tests/dm_tests/test_dm_details.py::test_invalid_dm_id PASSED        [ 34%]
http_tests/dm_tests/test_dm_details.py::test_invalid_token PASSED        [ 35%]
http_tests/dm_tests/test_dm_leave.py::test_member_leave_dm_successfully PASSED [ 35%]
http_tests/dm_tests/test_dm_leave.py::test_leave_dm_when_not_member PASSED [ 35%]
http_tests/dm_tests/test_dm_leave.py::test_invalid_dm_id PASSED          [ 35%]
http_tests/dm_tests/test_dm_leave.py::test_invalid_token PASSED          [ 36%]
http_tests/dm_tests/test_dm_list.py::test_when_in_no_dms PASSED          [ 36%]
http_tests/dm_tests/test_dm_list.py::test_when_in_one_dm PASSED          [ 36%]
http_tests/dm_tests/test_dm_list.py::test_when_in_multiple_dms PASSED    [ 36%]
http_tests/dm_tests/test_dm_list.py::test_list_after_leave_dm PASSED     [ 37%]
http_tests/dm_tests/test_dm_list.py::test_invalidated_token PASSED       [ 37%]
http_tests/dm_tests/test_dm_messages.py::test_under_fifty_messages_sent PASSED [ 37%]
http_tests/dm_tests/test_dm_messages.py::test_over_fifty_messages_sent PASSED [ 37%]
http_tests/dm_tests/test_dm_messages.py::test_removal_by_edit_reflected FAILED [ 38%]
http_tests/dm_tests/test_dm_messages.py::test_removal_by_deletion_reflected FAILED [ 38%]
http_tests/dm_tests/test_dm_messages.py::test_input_error_when_start_greater_than_message_num PASSED [ 38%]
http_tests/dm_tests/test_dm_messages.py::test_access_error_when_user_is_non_member PASSED [ 39%]
http_tests/dm_tests/test_dm_messages.py::test_input_error_when_dm_id_invalid PASSED [ 39%]
http_tests/dm_tests/test_dm_messages.py::test_access_error_when_invalid_token_given PASSED [ 39%]
http_tests/dm_tests/test_dm_remove.py::test_successful_dm_removal PASSED [ 39%]
http_tests/dm_tests/test_dm_remove.py::test_removal_removes_messages PASSED [ 40%]
http_tests/dm_tests/test_dm_remove.py::test_nonowner_cannot_remove_dm PASSED [ 40%]
http_tests/dm_tests/test_dm_remove.py::test_owner_nonmember_cannot_remove_dm PASSED [ 40%]
http_tests/dm_tests/test_dm_remove.py::test_invalid_dm_id PASSED         [ 40%]
http_tests/dm_tests/test_dm_remove.py::test_invalid_token PASSED         [ 41%]
http_tests/message_tests/test_message_edit.py::test_original_poster_can_edit_message_channel PASSED [ 41%]
http_tests/message_tests/test_message_edit.py::test_original_poster_can_edit_message_dm FAILED [ 41%]
http_tests/message_tests/test_message_edit.py::test_owner_can_edit_members_message_channel PASSED [ 41%]
http_tests/message_tests/test_message_edit.py::test_owner_can_edit_members_message_dm FAILED [ 42%]
http_tests/message_tests/test_message_edit.py::test_global_owner_can_edit_members_message_channel PASSED [ 42%]
http_tests/message_tests/test_message_edit.py::test_global_owner_cant_edit_members_message_dm FAILED [ 42%]
http_tests/message_tests/test_message_edit.py::test_empty_edit_deletes_message PASSED [ 43%]
http_tests/message_tests/test_message_edit.py::test_invalid_message_length PASSED [ 43%]
http_tests/message_tests/test_message_edit.py::test_cannot_edit_deleted_message PASSED [ 43%]
http_tests/message_tests/test_message_edit.py::test_nonowner_nonposter_cant_edit PASSED [ 43%]
http_tests/message_tests/test_message_edit.py::test_invalid_token PASSED [ 44%]
http_tests/message_tests/test_message_meta.py::test_message_ids_unique PASSED [ 44%]
http_tests/message_tests/test_message_meta.py::test_message_ids_unique_iter3 FAILED [ 44%]
http_tests/message_tests/test_message_pin.py::test_successful_pin_channel_owner_in_channel PASSED [ 44%]
http_tests/message_tests/test_message_pin.py::test_successful_pin_dm_owner_in_dm PASSED [ 45%]
http_tests/message_tests/test_message_pin.py::test_successful_pin_global_owner_in_channel PASSED [ 45%]
http_tests/message_tests/test_message_pin.py::test_invalid_message_id PASSED [ 45%]
http_tests/message_tests/test_message_pin.py::test_cannot_pin_twice PASSED [ 45%]
http_tests/message_tests/test_message_pin.py::test_channel_member_cant_pin PASSED [ 46%]
http_tests/message_tests/test_message_pin.py::test_dm_member_cant_pin FAILED [ 46%]
http_tests/message_tests/test_message_pin.py::test_global_owner_cant_pin_in_dm FAILED [ 46%]
http_tests/message_tests/test_message_pin.py::test_nonmember_cant_pin PASSED [ 47%]
http_tests/message_tests/test_message_pin.py::test_invalid_token PASSED  [ 47%]
http_tests/message_tests/test_message_react.py::test_successful_react_in_channel PASSED [ 47%]
http_tests/message_tests/test_message_react.py::test_successful_react_to_dm_message PASSED [ 47%]
http_tests/message_tests/test_message_react.py::test_invalid_message_id PASSED [ 48%]
http_tests/message_tests/test_message_react.py::test_invalid_react_id PASSED [ 48%]
http_tests/message_tests/test_message_react.py::test_cant_react_twice PASSED [ 48%]
http_tests/message_tests/test_message_react.py::test_nonmember_cannot_react PASSED [ 48%]
http_tests/message_tests/test_message_react.py::test_invalid_token PASSED [ 49%]
http_tests/message_tests/test_message_remove.py::test_original_poster_can_remove_message PASSED [ 49%]
http_tests/message_tests/test_message_remove.py::test_owner_can_remove_members_message PASSED [ 49%]
http_tests/message_tests/test_message_remove.py::test_global_owner_can_remove_members_message_channel PASSED [ 50%]
http_tests/message_tests/test_message_remove.py::test_global_owner_cant_remove_members_message_dm FAILED [ 50%]
http_tests/message_tests/test_message_remove.py::test_cannot_remove_deleted_message PASSED [ 50%]
http_tests/message_tests/test_message_remove.py::test_nonowner_nonposter_cant_remove_message PASSED [ 50%]
http_tests/message_tests/test_message_remove.py::test_invalid_token PASSED [ 51%]
http_tests/message_tests/test_message_send.py::test_valid_message PASSED [ 51%]
http_tests/message_tests/test_message_send.py::test_nonmember_post PASSED [ 51%]
http_tests/message_tests/test_message_send.py::test_invalid_channel PASSED [ 51%]
http_tests/message_tests/test_message_send.py::test_invalid_message[] PASSED [ 52%]
http_tests/message_tests/test_message_send.py::test_invalid_message[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] PASSED [ 52%]
http_tests/message_tests/test_message_send.py::test_invalid_token PASSED [ 52%]
http_tests/message_tests/test_message_senddm.py::test_valid_message PASSED [ 52%]
http_tests/message_tests/test_message_senddm.py::test_nonmember_post PASSED [ 53%]
http_tests/message_tests/test_message_senddm.py::test_invalid_dm PASSED  [ 53%]
http_tests/message_tests/test_message_senddm.py::test_invalid_message[] PASSED [ 53%]
http_tests/message_tests/test_message_senddm.py::test_invalid_message[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] PASSED [ 54%]
http_tests/message_tests/test_message_senddm.py::test_invalid_token PASSED [ 54%]
http_tests/message_tests/test_message_sendlater.py::test_valid_future_message PASSED [ 54%]
http_tests/message_tests/test_message_sendlater.py::test_returns_immediately PASSED [ 54%]
http_tests/message_tests/test_message_sendlater.py::test_invalid_returned_id_until_sent PASSED [ 55%]
http_tests/message_tests/test_message_sendlater.py::test_nonmember_cannot_sendlater PASSED [ 55%]
http_tests/message_tests/test_message_sendlater.py::test_cannot_time_travel_aka_send_message_in_past PASSED [ 55%]
http_tests/message_tests/test_message_sendlater.py::test_invalid_message[] PASSED [ 55%]
http_tests/message_tests/test_message_sendlater.py::test_invalid_message[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] PASSED [ 56%]
http_tests/message_tests/test_message_sendlater.py::test_invalid_channel PASSED [ 56%]
http_tests/message_tests/test_message_sendlater.py::test_invalid_token PASSED [ 56%]
http_tests/message_tests/test_message_sendlaterdm.py::test_valid_future_message PASSED [ 56%]
http_tests/message_tests/test_message_sendlaterdm.py::test_returns_immediately PASSED [ 57%]
http_tests/message_tests/test_message_sendlaterdm.py::test_invalid_returned_id_until_sent FAILED [ 57%]
http_tests/message_tests/test_message_sendlaterdm.py::test_nonmember_cannot_sendlater PASSED [ 57%]
http_tests/message_tests/test_message_sendlaterdm.py::test_cannot_time_travel_aka_send_message_in_past PASSED [ 58%]
http_tests/message_tests/test_message_sendlaterdm.py::test_invalid_message[] PASSED [ 58%]
http_tests/message_tests/test_message_sendlaterdm.py::test_invalid_message[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] PASSED [ 58%]
http_tests/message_tests/test_message_sendlaterdm.py::test_invalid_dm PASSED [ 58%]
http_tests/message_tests/test_message_sendlaterdm.py::test_invalid_token PASSED [ 59%]
http_tests/message_tests/test_message_share.py::test_successful_share_to_channel PASSED [ 59%]
http_tests/message_tests/test_message_share.py::test_successful_share_to_dm FAILED [ 59%]
http_tests/message_tests/test_message_share.py::test_successful_cross_share[True] FAILED [ 59%]
http_tests/message_tests/test_message_share.py::test_successful_cross_share[False] FAILED [ 60%]
http_tests/message_tests/test_message_share.py::test_cannot_share_to_unjoined_dm PASSED [ 60%]
http_tests/message_tests/test_message_share.py::test_cannot_share_to_unjoined_channel PASSED [ 60%]
http_tests/message_tests/test_message_share.py::test_cannot_share_from_unjoined_channel PASSED [ 60%]
http_tests/message_tests/test_message_share.py::test_cannot_share_from_unjoined_dm FAILED [ 61%]
http_tests/message_tests/test_message_share.py::test_invalid_og_message_id PASSED [ 61%]
http_tests/message_tests/test_message_share.py::test_invalid_message_length PASSED [ 61%]
http_tests/message_tests/test_message_share.py::test_share_to_invalid_channel_id PASSED [ 62%]
http_tests/message_tests/test_message_share.py::test_share_to_invalid_dm_id PASSED [ 62%]
http_tests/message_tests/test_message_share.py::test_invalid_token PASSED [ 62%]
http_tests/message_tests/test_message_unpin.py::test_successful_unpin_channel_owner_in_channel PASSED [ 62%]
http_tests/message_tests/test_message_unpin.py::test_successful_unpin_dm_owner_in_dm PASSED [ 63%]
http_tests/message_tests/test_message_unpin.py::test_successful_unpin_global_owner_in_channel PASSED [ 63%]
http_tests/message_tests/test_message_unpin.py::test_invalid_message_id PASSED [ 63%]
http_tests/message_tests/test_message_unpin.py::test_cannot_unpin_twice PASSED [ 63%]
http_tests/message_tests/test_message_unpin.py::test_channel_member_cant_unpin PASSED [ 64%]
http_tests/message_tests/test_message_unpin.py::test_dm_member_cant_unpin PASSED [ 64%]
http_tests/message_tests/test_message_unpin.py::test_global_owner_cant_unpin_in_dm FAILED [ 64%]
http_tests/message_tests/test_message_unpin.py::test_nonmember_cant_unpin PASSED [ 64%]
http_tests/message_tests/test_message_unpin.py::test_invalid_token PASSED [ 65%]
http_tests/message_tests/test_message_unreact.py::test_successful_unreact_in_channel PASSED [ 65%]
http_tests/message_tests/test_message_unreact.py::test_successful_unreact_to_dm_message PASSED [ 65%]
http_tests/message_tests/test_message_unreact.py::test_invalid_message_id PASSED [ 66%]
http_tests/message_tests/test_message_unreact.py::test_invalid_react_id PASSED [ 66%]
http_tests/message_tests/test_message_unreact.py::test_cant_unreact_twice PASSED [ 66%]
http_tests/message_tests/test_message_unreact.py::test_nonmember_cannot_unreact PASSED [ 66%]
http_tests/message_tests/test_message_unreact.py::test_invalid_token PASSED [ 67%]
http_tests/other_tests/test_clear.py::test_clear_works FAILED            [ 67%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_send_triggers_notification PASSED [ 67%]
http_tests/other_tests/test_notifications_get.py::test_tag_not_in_channel FAILED [ 67%]
http_tests/other_tests/test_notifications_get.py::test_multiple_same_tags_only_one_notification PASSED [ 68%]
http_tests/other_tests/test_notifications_get.py::test_tag_self PASSED   [ 68%]
http_tests/other_tests/test_notifications_get.py::test_multiple_tags FAILED [ 68%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_senddm_triggers_notification FAILED [ 68%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_edit_triggers_notification PASSED [ 69%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_share_triggers_notification PASSED [ 69%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_sendlater_triggers_notification PASSED [ 69%]
http_tests/other_tests/test_notifications_get.py::test_message_sendlater_tag_notifies_when_sent PASSED [ 70%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_sendlaterdm_triggers_notification FAILED [ 70%]
http_tests/other_tests/test_notifications_get.py::test_tag_notification_message_preview_length[a small message] PASSED [ 70%]
http_tests/other_tests/test_notifications_get.py::test_tag_notification_message_preview_length[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA] PASSED [ 70%]
http_tests/other_tests/test_notifications_get.py::test_react_triggers_notification[ch] FAILED [ 71%]
http_tests/other_tests/test_notifications_get.py::test_react_triggers_notification[dm] FAILED [ 71%]
http_tests/other_tests/test_notifications_get.py::test_add_thru_ch_invite_triggers_notification PASSED [ 71%]
http_tests/other_tests/test_notifications_get.py::test_add_thru_dm_create_triggers_notification PASSED [ 71%]
http_tests/other_tests/test_notifications_get.py::test_most_recent_20_notifications_fetched FAILED [ 72%]
http_tests/other_tests/test_notifications_get.py::test_invalid_token PASSED [ 72%]
http_tests/other_tests/test_search.py::test_no_matches PASSED            [ 72%]
http_tests/other_tests/test_search.py::test_single_match PASSED          [ 72%]
http_tests/other_tests/test_search.py::test_case_insensitive_match PASSED [ 73%]
http_tests/other_tests/test_search.py::test_multiple_matches PASSED      [ 73%]
http_tests/other_tests/test_search.py::test_multiple_channels_joined PASSED [ 73%]
http_tests/other_tests/test_search.py::test_search_includes_only_joined_channels FAILED [ 74%]
http_tests/other_tests/test_search.py::test_search_matches_more_than_just_authorised_user PASSED [ 74%]
http_tests/other_tests/test_search.py::test_invalid_search[] PASSED      [ 74%]
http_tests/other_tests/test_search.py::test_invalid_search[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] PASSED [ 74%]
http_tests/other_tests/test_search.py::test_invalid_token PASSED         [ 75%]
http_tests/other_tests/test_users_all.py::test_successful_users_all PASSED [ 75%]
http_tests/other_tests/test_users_all.py::test_invalid_token PASSED      [ 75%]
http_tests/standup_tests/test_standup_active.py::test_correct_return_format[True] PASSED [ 75%]
http_tests/standup_tests/test_standup_active.py::test_correct_return_format[False] PASSED [ 76%]
http_tests/standup_tests/test_standup_active.py::test_active_standup PASSED [ 76%]
http_tests/standup_tests/test_standup_active.py::test_inactive_standup PASSED [ 76%]
http_tests/standup_tests/test_standup_active.py::test_invalid_channel_id PASSED [ 77%]
http_tests/standup_tests/test_standup_active.py::test_invalid_token PASSED [ 77%]
http_tests/standup_tests/test_standup_send.py::test_messages_buffered_and_displayed_correctly PASSED [ 77%]
http_tests/standup_tests/test_standup_send.py::test_standup_sends_after_logged_out PASSED [ 77%]
http_tests/standup_tests/test_standup_send.py::test_return_format PASSED [ 78%]
http_tests/standup_tests/test_standup_send.py::test_non_member_cannot_standup_send PASSED [ 78%]
http_tests/standup_tests/test_standup_send.py::test_send_when_standup_inactive PASSED [ 78%]
http_tests/standup_tests/test_standup_send.py::test_invalid_message_length PASSED [ 78%]
http_tests/standup_tests/test_standup_send.py::test_invalid_channel_id PASSED [ 79%]
http_tests/standup_tests/test_standup_send.py::test_invalid_token PASSED [ 79%]
http_tests/standup_tests/test_standup_start.py::test_standup_start_return_format PASSED [ 79%]
http_tests/standup_tests/test_standup_start.py::test_standup_no_messages PASSED [ 79%]
http_tests/standup_tests/test_standup_start.py::test_returns_immediately PASSED [ 80%]
http_tests/standup_tests/test_standup_start.py::test_standup_restartable_after_lapse PASSED [ 80%]
http_tests/standup_tests/test_standup_start.py::test_standup_affects_only_one_channel PASSED [ 80%]
http_tests/standup_tests/test_standup_start.py::test_nonmember_cannot_start_standup PASSED [ 81%]
http_tests/standup_tests/test_standup_start.py::test_cannot_start_standup_when_already_active PASSED [ 81%]
http_tests/standup_tests/test_standup_start.py::test_invalid_standup_length PASSED [ 81%]
http_tests/standup_tests/test_standup_start.py::test_invalid_channel_id PASSED [ 81%]
http_tests/standup_tests/test_standup_start.py::test_invalid_token PASSED [ 82%]
http_tests/stats_tests/test_user_stats.py::test_return_type_correct FAILED [ 82%]
http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channels_create PASSED [ 82%]
http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_join PASSED [ 82%]
http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_invite PASSED [ 83%]
http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_leave PASSED [ 83%]
http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_create PASSED [ 83%]
http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_leave PASSED [ 83%]
http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_remove PASSED [ 84%]
http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_send PASSED [ 84%]
http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_sendlater PASSED [ 84%]
http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_senddm PASSED [ 85%]
http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_senddmlater PASSED [ 85%]
http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_share PASSED [ 85%]
http_tests/stats_tests/test_user_stats.py::test_messages_tracked_standup_finish PASSED [ 85%]
http_tests/stats_tests/test_user_stats.py::test_involvement_tracked PASSED [ 86%]
http_tests/stats_tests/test_user_stats.py::test_invalid_token PASSED     [ 86%]
http_tests/stats_tests/test_users_stats.py::test_return_type_correct PASSED [ 86%]
http_tests/stats_tests/test_users_stats.py::test_channels_tracked_channels_create PASSED [ 86%]
http_tests/stats_tests/test_users_stats.py::test_dms_tracked_dm_create PASSED [ 87%]
http_tests/stats_tests/test_users_stats.py::test_dms_tracked_dm_remove PASSED [ 87%]
http_tests/stats_tests/test_users_stats.py::test_messages_tracked_message_send PASSED [ 87%]
http_tests/stats_tests/test_users_stats.py::test_messages_tracked_message_sendlater PASSED [ 87%]
http_tests/stats_tests/test_users_stats.py::test_messages_tracked_message_senddm PASSED [ 88%]
http_tests/stats_tests/test_users_stats.py::test_messages_tracked_message_senddmlater PASSED [ 88%]
http_tests/stats_tests/test_users_stats.py::test_messages_tracked_message_share PASSED [ 88%]
http_tests/stats_tests/test_users_stats.py::test_messages_tracked_standup_finish PASSED [ 89%]
http_tests/stats_tests/test_users_stats.py::test_messages_tracked_edited_to_removal PASSED [ 89%]
http_tests/stats_tests/test_users_stats.py::test_messages_tracked_deleted PASSED [ 89%]
http_tests/stats_tests/test_users_stats.py::test_messages_tracked_dm_removed PASSED [ 89%]
http_tests/stats_tests/test_users_stats.py::test_utilization_tracked PASSED [ 90%]
http_tests/stats_tests/test_users_stats.py::test_invalid_token PASSED    [ 90%]
http_tests/user_tests/test_user_profile.py::test_user_profile_valid PASSED [ 90%]
http_tests/user_tests/test_user_profile.py::test_invalid_user PASSED     [ 90%]
http_tests/user_tests/test_user_profile.py::test_invalid_token PASSED    [ 91%]
http_tests/user_tests/test_user_profile_setemail.py::test_successful_email_change PASSED [ 91%]
http_tests/user_tests/test_user_profile_setemail.py::test_cannot_change_to_taken_email PASSED [ 91%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[] PASSED [ 91%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[bob] PASSED [ 92%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[ab.com] PASSED [ 92%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[@gmail.com] PASSED [ 92%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[ab@ab@gmail.com] PASSED [ 93%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_token PASSED [ 93%]
http_tests/user_tests/test_user_profile_sethandle.py::test_successful_handle_change PASSED [ 93%]
http_tests/user_tests/test_user_profile_sethandle.py::test_cannot_change_to_taken_handle PASSED [ 93%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[] PASSED [ 94%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[a] PASSED [ 94%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[aa] PASSED [ 94%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[aaaaaaaaaaaaaaaaaaaaa] PASSED [ 94%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[new handle] PASSED [ 95%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[newh@ndle] PASSED [ 95%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_token PASSED [ 95%]
http_tests/user_tests/test_user_profile_setname.py::test_user_profile_setname_valid_name PASSED [ 95%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[-] PASSED [ 96%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] PASSED [ 96%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-] PASSED [ 96%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] PASSED [ 97%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_token PASSED [ 97%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_return_format_correct PASSED [ 97%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_cannot_upload_non_jpeg PASSED [ 97%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_dimensions[-1000-0-0-0] PASSED [ 98%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_dimensions[0--1000-0-0] PASSED [ 98%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_dimensions[0-0--1000-0] PASSED [ 98%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_dimensions[0-0-0--1000] PASSED [ 98%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_x_end_less_than_start_value PASSED [ 99%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_y_end_less_than_start_value PASSED [ 99%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_url PASSED [ 99%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_token PASSED [100%]

====== Marks recorded: 163.82 ======


=================================== FAILURES ===================================
______________________ test_successful_permission_change _______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.o9u0BkCU2NC71jbMWivRKfGjP-oq9AUZt95pJRPOpCA', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to....eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjJ9.e0YwR8u7aimDKxpeEz5SswDytI1vQru3KNe0zwoWsV4', handle_str='buzzlightyear')
ctx = None

    def test_successful_permission_change(user_woody, user_buzz, ctx):
        admin_userpermission_change(user_woody.token, user_buzz.u_id, Permissions.DREAMS_OWNER, ctx)
    
        # with this newfound power, buzz betrays woody (just like in the movie)
        # this should succeed
>       assert admin_userpermission_change(user_buzz.token, user_woody.u_id, Permissions.DREAMS_MEMBER, ctx) is not None
E       AssertionError: assert None is not None
E        +  where None = admin_userpermission_change('eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjJ9.e0YwR8u7aimDKxpeEz5SswDytI1vQru3KNe0zwoWsV4', 1, 2, None)
E        +    where 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjJ9.e0YwR8u7aimDKxpeEz5SswDytI1vQru3KNe0zwoWsV4' = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to....eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjJ9.e0YwR8u7aimDKxpeEz5SswDytI1vQru3KNe0zwoWsV4', handle_str='buzzlightyear').token
E        +    and   1 = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.o9u0BkCU2NC71jbMWivRKfGjP-oq9AUZt95pJRPOpCA', handle_str='sheriffwoody').u_id
E        +    and   2 = Permissions.DREAMS_MEMBER

http_tests/admin_tests/test_admin_userpermission_change.py:20: AssertionError
__________________________ test_return_format_correct __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.o9u0BkCU2NC71jbMWivRKfGjP-oq9AUZt95pJRPOpCA', handle_str='sheriffwoody')
ctx = None

    @iteration3
    def test_return_format_correct(user_woody, ctx):
>       assert auth_passwordreset_request(user_woody.email, ctx) == {}
E       assert None == {}
E         +None
E         -{}

http_tests/auth_tests/test_passwordreset_request.py:18: AssertionError
_______________________ test_non_member_cannot_add_owner _______________________

woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to....eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjJ9.e0YwR8u7aimDKxpeEz5SswDytI1vQru3KNe0zwoWsV4', handle_str='buzzlightyear')
ctx = None

    def test_non_member_cannot_add_owner(woodys_public_toybox, user_buzz, ctx):
        with pytest.raises(AccessError):
>           channel_addowner(user_buzz.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)

http_tests/channel_tests/test_channel_addowner.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:69: in channel_addowner
    token=token, channel_id=channel_id, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
______________ test_global_owner_non_member_cant_addowner_private ______________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.o9u0BkCU2NC71jbMWivRKfGjP-oq9AUZt95pJRPOpCA', handle_str='sheriffwoody')
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=1, owner_members=[2], all_members=[])
ctx = None

    def test_global_owner_non_member_cant_addowner_private(user_woody, zergs_private_lair, ctx):
        with pytest.raises(AccessError):
>           channel_addowner(user_woody.token, zergs_private_lair.channel_id, user_woody.u_id, ctx)

http_tests/channel_tests/test_channel_addowner.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:69: in channel_addowner
    token=token, channel_id=channel_id, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
______________ test_global_owner_non_member_cant_addowner_public _______________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to....eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.o9u0BkCU2NC71jbMWivRKfGjP-oq9AUZt95pJRPOpCA', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[2], all_members=[])
ctx = None

    def test_global_owner_non_member_cant_addowner_public(user_buzz, woodys_public_toybox, ctx):
        with pytest.raises(AccessError):
>           channel_addowner(user_buzz.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)

http_tests/channel_tests/test_channel_addowner.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:69: in channel_addowner
    token=token, channel_id=channel_id, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
________________________ test_removal_by_edit_reflected ________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.o9u0BkCU2NC71jbMWivRKfGjP-oq9AUZt95pJRPOpCA', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear, sheriffwoody', dm_id=1)
ctx = None

    def test_removal_by_edit_reflected(user_woody, woody_and_buzz_dm, ctx):
        msg = message_senddm(user_woody.token, woody_and_buzz_dm.dm_id, 'you are a toy maybe?', ctx)['message_id']
    
        dm_msgs = dm_messages(user_woody.token, woody_and_buzz_dm.dm_id, 0, ctx)
        assert dm_msgs['start'] == 0
        assert dm_msgs['end'] == -1
        assert msg in [m['message_id'] for m in dm_msgs['messages']]
    
>       message_edit(user_woody.token, msg, '', ctx)

http_tests/dm_tests/test_dm_messages.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:35: in message_edit
    token=token, message_id=message_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
______________________ test_removal_by_deletion_reflected ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.o9u0BkCU2NC71jbMWivRKfGjP-oq9AUZt95pJRPOpCA', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear, sheriffwoody', dm_id=1)
ctx = None

    def test_removal_by_deletion_reflected(user_woody, woody_and_buzz_dm, ctx):
        msg = message_senddm(user_woody.token, woody_and_buzz_dm.dm_id, 'you are a toy maybe?', ctx)['message_id']
    
        ch_msgs = dm_messages(user_woody.token, woody_and_buzz_dm.dm_id, 0, ctx)
        assert ch_msgs['start'] == 0
        assert ch_msgs['end'] == -1
        assert msg in [m['message_id'] for m in ch_msgs['messages']]
    
>       message_remove(user_woody.token, msg, ctx)

http_tests/dm_tests/test_dm_messages.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:24: in message_remove
    token=token, message_id=message_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
___________________ test_original_poster_can_edit_message_dm ___________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.o9u0BkCU2NC71jbMWivRKfGjP-oq9AUZt95pJRPOpCA', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear, sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f99115b9950>
ctx = None

    def test_original_poster_can_edit_message_dm(user_woody, woody_and_buzz_dm, message_factory, ctx):
        a_msg = message_factory(user_woody, woody_and_buzz_dm)
    
>       message_edit(user_woody.token, a_msg.message_id, 'hi', ctx)

http_tests/message_tests/test_message_edit.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:35: in message_edit
    token=token, message_id=message_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
____________________ test_owner_can_edit_members_message_dm ____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.o9u0BkCU2NC71jbMWivRKfGjP-oq9AUZt95pJRPOpCA', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear, sheriffwoody', dm_id=1)
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to....eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjJ9.e0YwR8u7aimDKxpeEz5SswDytI1vQru3KNe0zwoWsV4', handle_str='buzzlightyear')
message_factory = <function message_factory.<locals>.make_message at 0x7f99117091e0>
ctx = None

    def test_owner_can_edit_members_message_dm(user_woody, woody_and_buzz_dm, user_buzz, message_factory, ctx):
        buzzs_msg = message_factory(user_buzz, woody_and_buzz_dm)
    
>       message_edit(user_woody.token, buzzs_msg.message_id, 'hi', ctx)

http_tests/message_tests/test_message_edit.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:35: in message_edit
    token=token, message_id=message_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
________________ test_global_owner_cant_edit_members_message_dm ________________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to....eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.o9u0BkCU2NC71jbMWivRKfGjP-oq9AUZt95pJRPOpCA', handle_str='buzzlightyear')
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=2, token=...9.eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjJ9.e0YwR8u7aimDKxpeEz5SswDytI1vQru3KNe0zwoWsV4', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=2, members=[1], name='buzzlightyear, sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f99116e6f28>
ctx = None

    def test_global_owner_cant_edit_members_message_dm(user_buzz, user_woody, woody_and_buzz_dm, message_factory, ctx):
        woodys_msg = message_factory(user_woody, woody_and_buzz_dm)
        with pytest.raises(AccessError):
>           message_edit(user_buzz.token, woodys_msg.message_id, 'hi', ctx)

http_tests/message_tests/test_message_edit.py:75: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:35: in message_edit
    token=token, message_id=message_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
________________________ test_message_ids_unique_iter3 _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.o9u0BkCU2NC71jbMWivRKfGjP-oq9AUZt95pJRPOpCA', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=2, token=...1NiJ9.eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjJ9.e0YwR8u7aimDKxpeEz5SswDytI1vQru3KNe0zwoWsV4', handle_str='lordzerg')
woody_and_buzz_dm = DM(owner=1, members=[3], name='buzzlightyear, sheriffwoody', dm_id=1)
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=1, owner_members=[2], all_members=[])
ctx = None

    @pytest.mark.marks(0.5)
    @iteration3
    def test_message_ids_unique_iter3(user_woody, user_zerg, woody_and_buzz_dm, zergs_private_lair, ctx):
        msg1 = message_send(user_zerg.token, zergs_private_lair.channel_id, 'hi', ctx)
    
        # intra
        msg2 = message_sendlater(user_zerg.token, zergs_private_lair.channel_id, 'hi', utc_now() + 1, ctx)
    
        # cross
        msg3 = message_senddm(user_woody.token, woody_and_buzz_dm.dm_id, 'hi again', ctx)
        msg4 = message_sendlaterdm(user_woody.token, woody_and_buzz_dm.dm_id, 'hi one more time', utc_now() + 1, ctx)
    
        sleep(2)
    
        assert msg1['message_id'] != msg2['message_id']
>       assert msg2['message_id'] != msg3['message_id']
E       assert 3 != 3

http_tests/message_tests/test_message_meta.py:36: AssertionError
___________________________ test_dm_member_cant_pin ____________________________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to....eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.o9u0BkCU2NC71jbMWivRKfGjP-oq9AUZt95pJRPOpCA', handle_str='buzzlightyear')
woody_and_buzz_dm = DM(owner=2, members=[1], name='buzzlightyear, sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f99115b9d08>
ctx = None

    @iteration3
    def test_dm_member_cant_pin(user_buzz, woody_and_buzz_dm, message_factory, ctx):
        a_msg = message_factory(user_buzz, woody_and_buzz_dm)
        with pytest.raises(AccessError):
>           message_pin(user_buzz.token, a_msg.message_id, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/message_tests/test_message_pin.py:83: Failed
_______________________ test_global_owner_cant_pin_in_dm _______________________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to....eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.o9u0BkCU2NC71jbMWivRKfGjP-oq9AUZt95pJRPOpCA', handle_str='buzzlightyear')
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=2, token=...9.eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjJ9.e0YwR8u7aimDKxpeEz5SswDytI1vQru3KNe0zwoWsV4', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=2, members=[1], name='buzzlightyear, sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f9911709400>
ctx = None

    @iteration3
    def test_global_owner_cant_pin_in_dm(user_buzz, user_woody, woody_and_buzz_dm, message_factory, ctx):
        a_msg = message_factory(user_woody, woody_and_buzz_dm)
        with pytest.raises(AccessError):
>           message_pin(user_buzz.token, a_msg.message_id, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/message_tests/test_message_pin.py:90: Failed
_______________ test_global_owner_cant_remove_members_message_dm _______________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to....eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.o9u0BkCU2NC71jbMWivRKfGjP-oq9AUZt95pJRPOpCA', handle_str='buzzlightyear')
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=2, token=...9.eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjJ9.e0YwR8u7aimDKxpeEz5SswDytI1vQru3KNe0zwoWsV4', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=2, members=[1], name='buzzlightyear, sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f99115ce510>
ctx = None

    def test_global_owner_cant_remove_members_message_dm(user_buzz, user_woody, woody_and_buzz_dm, message_factory, ctx):
        woodys_msg = message_factory(user_woody, woody_and_buzz_dm)
        with pytest.raises(AccessError):
>           message_remove(user_buzz.token, woodys_msg.message_id, ctx)

http_tests/message_tests/test_message_remove.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:24: in message_remove
    token=token, message_id=message_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
_____________________ test_invalid_returned_id_until_sent ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.o9u0BkCU2NC71jbMWivRKfGjP-oq9AUZt95pJRPOpCA', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear, sheriffwoody', dm_id=1)
ctx = None

    @iteration3
    def test_invalid_returned_id_until_sent(user_woody, woody_and_buzz_dm, ctx):
        msg_text = 'hello, world'
        tts = utc_now() + 2
        msg = message_sendlaterdm(user_woody.token, woody_and_buzz_dm.dm_id, msg_text, tts, ctx)
    
        with pytest.raises(InputError):
            message_remove(user_woody.token, msg['message_id'], ctx)
    
        sleep(3)
    
>       message_remove(user_woody.token, msg['message_id'], ctx)

http_tests/message_tests/test_message_sendlaterdm.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:24: in message_remove
    token=token, message_id=message_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
_________________________ test_successful_share_to_dm __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.o9u0BkCU2NC71jbMWivRKfGjP-oq9AUZt95pJRPOpCA', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear, sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f99115d8268>
ctx = None

    @iteration3
    def test_successful_share_to_dm(user_woody, woody_and_buzz_dm, message_factory, ctx):
        a_msg = message_factory(user_woody, woody_and_buzz_dm, 'hi')
    
>       shared_msg = message_share(user_woody.token, a_msg.message_id, 'amazing', -1, woody_and_buzz_dm.dm_id, ctx)

http_tests/message_tests/test_message_share.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:90: in message_share
    token=token, og_message_id=og_message_id, message=msg, channel_id=channel_id, dm_id=dm_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
______________________ test_successful_cross_share[True] _______________________

to_ch = True
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.o9u0BkCU2NC71jbMWivRKfGjP-oq9AUZt95pJRPOpCA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear, sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f99116baea0>
ctx = None

    @iteration3
    @pytest.mark.parametrize('to_ch', [True, False])
    def test_successful_cross_share(to_ch, user_woody, woodys_public_toybox, woody_and_buzz_dm, message_factory, ctx):
        if to_ch:
            a_msg = message_factory(user_woody, woody_and_buzz_dm, 'hi')
            cross = message_share(user_woody.token, a_msg.message_id, 'amazing', woodys_public_toybox.channel_id, -1, ctx)
            msgs = channel_messages(user_woody.token, woodys_public_toybox.channel_id, 0, ctx)
        else:
            a_msg = message_factory(user_woody, woodys_public_toybox, 'hi')
            cross = message_share(user_woody.token, a_msg.message_id, 'amazing', -1, woody_and_buzz_dm.dm_id, ctx)
            msgs = dm_messages(user_woody.token, woody_and_buzz_dm.dm_id, 0, ctx)
    
        assert 'shared_message_id' in cross
>       assert cross['shared_message_id'] in [m['message_id'] for m in msgs['messages']]
E       assert 3 in []

http_tests/message_tests/test_message_share.py:56: AssertionError
______________________ test_successful_cross_share[False] ______________________

to_ch = False
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.o9u0BkCU2NC71jbMWivRKfGjP-oq9AUZt95pJRPOpCA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear, sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f9911709ea0>
ctx = None

    @iteration3
    @pytest.mark.parametrize('to_ch', [True, False])
    def test_successful_cross_share(to_ch, user_woody, woodys_public_toybox, woody_and_buzz_dm, message_factory, ctx):
        if to_ch:
            a_msg = message_factory(user_woody, woody_and_buzz_dm, 'hi')
            cross = message_share(user_woody.token, a_msg.message_id, 'amazing', woodys_public_toybox.channel_id, -1, ctx)
            msgs = channel_messages(user_woody.token, woodys_public_toybox.channel_id, 0, ctx)
        else:
            a_msg = message_factory(user_woody, woodys_public_toybox, 'hi')
            cross = message_share(user_woody.token, a_msg.message_id, 'amazing', -1, woody_and_buzz_dm.dm_id, ctx)
            msgs = dm_messages(user_woody.token, woody_and_buzz_dm.dm_id, 0, ctx)
    
        assert 'shared_message_id' in cross
>       assert cross['shared_message_id'] in [m['message_id'] for m in msgs['messages']]
E       assert 3 in []

http_tests/message_tests/test_message_share.py:56: AssertionError
______________________ test_cannot_share_from_unjoined_dm ______________________

user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...1NiJ9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.o9u0BkCU2NC71jbMWivRKfGjP-oq9AUZt95pJRPOpCA', handle_str='lordzerg')
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=2, token=...9.eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjJ9.e0YwR8u7aimDKxpeEz5SswDytI1vQru3KNe0zwoWsV4', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=2, members=[3], name='buzzlightyear, sheriffwoody', dm_id=1)
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f991157a840>
ctx = None

    @iteration3
    def test_cannot_share_from_unjoined_dm(user_zerg, user_woody, woody_and_buzz_dm, zergs_private_lair, message_factory, ctx):
        a_msg = message_factory(user_woody, woody_and_buzz_dm)
        with pytest.raises(InputError):
>           message_share(user_zerg.token, a_msg.message_id, 'lol',  zergs_private_lair.channel_id, -1, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.InputError'>

http_tests/message_tests/test_message_share.py:84: Failed
______________________ test_global_owner_cant_unpin_in_dm ______________________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to....eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.o9u0BkCU2NC71jbMWivRKfGjP-oq9AUZt95pJRPOpCA', handle_str='buzzlightyear')
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=2, token=...9.eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjJ9.e0YwR8u7aimDKxpeEz5SswDytI1vQru3KNe0zwoWsV4', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=2, members=[1], name='buzzlightyear, sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f9911651950>
ctx = None

    @iteration3
    def test_global_owner_cant_unpin_in_dm(user_buzz, user_woody, woody_and_buzz_dm, message_factory, ctx):
        a_msg = message_factory(user_woody, woody_and_buzz_dm)
        msg_pin(user_woody.token, a_msg.message_id, ctx)
        with pytest.raises(AccessError):
>           message_unpin(user_buzz.token, a_msg.message_id, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/message_tests/test_message_unpin.py:101: Failed
_______________________________ test_clear_works _______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.o9u0BkCU2NC71jbMWivRKfGjP-oq9AUZt95pJRPOpCA', handle_str='sheriffwoody')
user_factory = <function user_factory.<locals>.make_user at 0x7f9911651f28>
ctx = None

    def test_clear_works(user_woody, user_factory, ctx):
        # an existing user can do something
        assert users_all(user_woody.token, ctx) is not None
    
        clear(ctx)
    
        with pytest.raises(AccessError):
            #  ex-existing user now can't do the original action because they don't exist
>           users_all(user_woody.token, ctx)

http_tests/other_tests/test_clear.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/other.py:13: in users_all
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
___________________________ test_tag_not_in_channel ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.o9u0BkCU2NC71jbMWivRKfGjP-oq9AUZt95pJRPOpCA', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to....eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjJ9.e0YwR8u7aimDKxpeEz5SswDytI1vQru3KNe0zwoWsV4', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f99115c10d0>
ctx = None

    @iteration3
    def test_tag_not_in_channel(user_woody, user_buzz, woodys_public_toybox, message_factory, ctx):
        content = f'@{user_buzz.handle_str} hi'
        message_factory(user_woody, woodys_public_toybox, content)
    
        notifs = notifications_get(user_buzz.token, ctx)
    
>       assert notifs == {'notifications': []}
E       AssertionError: assert {'notifications': [{'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @buzzlightyear hi'}]} == {'notifications': []}
E         Differing items:
E         {'notifications': [{'channel_id': 1, 'dm_id': -1, 'notification_message': 'sheriffwoody tagged you in woodys toybox: @buzzlightyear hi'}]} != {'notifications': []}
E         Full diff:
E           {
E         -  'notifications': [],
E         +  'notifications': [{'channel_id': 1,
E         +                     'dm_id': -1,
E         +                     'notification_message': 'sheriffwoody tagged you in woodys '
E         +                                             'toybox: @buzzlightyear hi'}],
E           }

http_tests/other_tests/test_notifications_get.py:40: AssertionError
______________________________ test_multiple_tags ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.o9u0BkCU2NC71jbMWivRKfGjP-oq9AUZt95pJRPOpCA', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to....eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjJ9.e0YwR8u7aimDKxpeEz5SswDytI1vQru3KNe0zwoWsV4', handle_str='buzzlightyear')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=3, token=...1NiJ9.eyJhdXRoX3VzZXJfaWQiOjMsInNlc3Npb25faWQiOjN9.FeDulwTH1Vfot0WTpGEif5q3v0gXpI8pqs5LHsqbs1s', handle_str='lordzerg')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f9911526598>
ctx = None

    @iteration3
    def test_multiple_tags(user_woody, user_buzz, user_zerg, woodys_public_toybox, message_factory, ctx):
        channel_invite(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)
        channel_invite(user_woody.token, woodys_public_toybox.channel_id, user_zerg.u_id, ctx)
    
        content = f'@{user_woody.handle_str} hi @{user_zerg.handle_str}'
        message_factory(user_buzz, woodys_public_toybox, content)
    
        notifs_woody = notifications_get(user_woody.token, ctx)
    
        assert notifs_woody == {'notifications': [{
            'channel_id': woodys_public_toybox.channel_id,
            'dm_id': -1,
            'notification_message': f'{user_buzz.handle_str} tagged you in {woodys_public_toybox.name}: {content[:20]}'
        }]}
    
        notifs_zerg = notifications_get(user_zerg.token, ctx)
    
>       assert notifs_zerg == {'notifications': [{
            'channel_id': woodys_public_toybox.channel_id,
            'dm_id': -1,
            'notification_message': f'{user_buzz.handle_str} tagged you in {woodys_public_toybox.name}: {content[:20]}'
        },
        {
            'channel_id': woodys_public_toybox.channel_id,
            'dm_id': -1,
            'notification_message': f'{user_woody.handle_str} added you to {woodys_public_toybox.name}'
        }]}
E       AssertionError: assert {'notifications': [{'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody added you to woodys '\n                                            'toybox'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody hi '\n                                            '@lo'}]} == {'notifications': [{'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody hi '\n                                            '@lo'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody added you to woodys '\n                                            'toybox'}]}
E         Differing items:
E         {'notifications': [{'channel_id': 1, 'dm_id': -1, 'notification_message': 'sheriffwoody added you to woodys toybox'}, ...annel_id': 1, 'dm_id': -1, 'notification_message': 'buzzlightyear tagged you in woodys toybox: @sheriffwoody hi @lo'}]} != {'notifications': [{'channel_id': 1, 'dm_id': -1, 'notification_message': 'buzzlightyear tagged you in woodys toybox: ...riffwoody hi @lo'}, {'channel_id': 1, 'dm_id': -1, 'notification_message': 'sheriffwoody added you to woodys toybox'}]}
E         Full diff:
E           {
E            'notifications': [{'channel_id': 1,
E                               'dm_id': -1,
E         +                     'notification_message': 'sheriffwoody added you to woodys '
E         +                                             'toybox'},
E         +                    {'channel_id': 1,
E         +                     'dm_id': -1,
E                               'notification_message': 'buzzlightyear tagged you in '
E                                                       'woodys toybox: @sheriffwoody hi '
E         -                                             '@lo'},
E         +                                             '@lo'}],
E         ?                                                   +
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'sheriffwoody added you to woodys '
E         -                                             'toybox'}],
E           }

http_tests/other_tests/test_notifications_get.py:91: AssertionError
______________ test_tag_thru_message_senddm_triggers_notification ______________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.o9u0BkCU2NC71jbMWivRKfGjP-oq9AUZt95pJRPOpCA', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to....eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjJ9.e0YwR8u7aimDKxpeEz5SswDytI1vQru3KNe0zwoWsV4', handle_str='buzzlightyear')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear, sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f9911708268>
ctx = None

    @iteration3
    def test_tag_thru_message_senddm_triggers_notification(user_woody, user_buzz, woody_and_buzz_dm, message_factory, ctx):
        content = f'@{user_woody.handle_str} hi'
        message_factory(user_buzz, woody_and_buzz_dm, content)
    
        notifs = notifications_get(user_woody.token, ctx)
    
>       assert notifs == {'notifications': [{
            'channel_id': -1,
            'dm_id': woody_and_buzz_dm.dm_id,
            'notification_message': f'{user_buzz.handle_str} tagged you in {woody_and_buzz_dm.name}: {content[:20]}'
        }]}
E       AssertionError: assert {'notifications': [{'channel_id': -1,\n                    'dm_id': 1,\n                    'notification_message': 'sheriffwoody added you to '\n                                            'buzzlightyear, sheriffwoody'},\n                   {'channel_id': -1,\n                    'dm_id': 1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'buzzlightyear, sheriffwoody: '\n                                            '@sheriffwoody hi'}]} == {'notifications': [{'channel_id': -1,\n                    'dm_id': 1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'buzzlightyear, sheriffwoody: '\n                                            '@sheriffwoody hi'}]}
E         Differing items:
E         {'notifications': [{'channel_id': -1, 'dm_id': 1, 'notification_message': 'sheriffwoody added you to buzzlightyear, sh... -1, 'dm_id': 1, 'notification_message': 'buzzlightyear tagged you in buzzlightyear, sheriffwoody: @sheriffwoody hi'}]} != {'notifications': [{'channel_id': -1, 'dm_id': 1, 'notification_message': 'buzzlightyear tagged you in buzzlightyear, sheriffwoody: @sheriffwoody hi'}]}
E         Full diff:
E           {
E            'notifications': [{'channel_id': -1,
E         +                     'dm_id': 1,
E         +                     'notification_message': 'sheriffwoody added you to '
E         +                                             'buzzlightyear, sheriffwoody'},
E         +                    {'channel_id': -1,
E                               'dm_id': 1,
E                               'notification_message': 'buzzlightyear tagged you in '
E                                                       'buzzlightyear, sheriffwoody: '
E                                                       '@sheriffwoody hi'}],
E           }

http_tests/other_tests/test_notifications_get.py:110: AssertionError
___________ test_tag_thru_message_sendlaterdm_triggers_notification ____________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.o9u0BkCU2NC71jbMWivRKfGjP-oq9AUZt95pJRPOpCA', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to....eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjJ9.e0YwR8u7aimDKxpeEz5SswDytI1vQru3KNe0zwoWsV4', handle_str='buzzlightyear')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear, sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f9911526488>
ctx = None

    @iteration3
    def test_tag_thru_message_sendlaterdm_triggers_notification(user_woody, user_buzz, woody_and_buzz_dm, message_factory, ctx):
        content = f'@{user_woody.handle_str} hi'
        message_factory(user_buzz, woody_and_buzz_dm, content, delay=1)
    
        sleep(2)
    
        notifs = notifications_get(user_woody.token, ctx)
    
>       assert notifs == {'notifications': [{
            'channel_id': -1,
            'dm_id': woody_and_buzz_dm.dm_id,
            'notification_message': f'{user_buzz.handle_str} tagged you in {woody_and_buzz_dm.name}: {content[:20]}'
        }]}
E       AssertionError: assert {'notifications': [{'channel_id': -1,\n                    'dm_id': 1,\n                    'notification_message': 'sheriffwoody added you to '\n                                            'buzzlightyear, sheriffwoody'},\n                   {'channel_id': -1,\n                    'dm_id': 1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'buzzlightyear, sheriffwoody: '\n                                            '@sheriffwoody hi'}]} == {'notifications': [{'channel_id': -1,\n                    'dm_id': 1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'buzzlightyear, sheriffwoody: '\n                                            '@sheriffwoody hi'}]}
E         Differing items:
E         {'notifications': [{'channel_id': -1, 'dm_id': 1, 'notification_message': 'sheriffwoody added you to buzzlightyear, sh... -1, 'dm_id': 1, 'notification_message': 'buzzlightyear tagged you in buzzlightyear, sheriffwoody: @sheriffwoody hi'}]} != {'notifications': [{'channel_id': -1, 'dm_id': 1, 'notification_message': 'buzzlightyear tagged you in buzzlightyear, sheriffwoody: @sheriffwoody hi'}]}
E         Full diff:
E           {
E            'notifications': [{'channel_id': -1,
E         +                     'dm_id': 1,
E         +                     'notification_message': 'sheriffwoody added you to '
E         +                                             'buzzlightyear, sheriffwoody'},
E         +                    {'channel_id': -1,
E                               'dm_id': 1,
E                               'notification_message': 'buzzlightyear tagged you in '
E                                                       'buzzlightyear, sheriffwoody: '
E                                                       '@sheriffwoody hi'}],
E           }

http_tests/other_tests/test_notifications_get.py:208: AssertionError
_____________________ test_react_triggers_notification[ch] _____________________

dest = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.o9u0BkCU2NC71jbMWivRKfGjP-oq9AUZt95pJRPOpCA', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to....eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjJ9.e0YwR8u7aimDKxpeEz5SswDytI1vQru3KNe0zwoWsV4', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear, sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f99115ce158>
ctx = None

    @iteration3
    @pytest.mark.parametrize('dest', ['ch', 'dm'])
    def test_react_triggers_notification(dest, user_woody, user_buzz, woodys_public_toybox, woody_and_buzz_dm, message_factory, ctx):
        if dest == 'ch':
            channel_invite(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)
    
        dest = woodys_public_toybox if dest == 'ch' else woody_and_buzz_dm
    
        a_msg = message_factory(user_woody, dest)
    
        message_react(user_buzz.token, a_msg.message_id, 1, ctx)
    
        notifs = notifications_get(user_woody.token, ctx)
    
>       assert notifs == {'notifications': [{
            'channel_id': woodys_public_toybox.channel_id if dest == woodys_public_toybox else -1,
            'dm_id': woody_and_buzz_dm.dm_id if dest == woody_and_buzz_dm else -1,
            'notification_message': f'{user_buzz.handle_str} reacted to your message in {dest.name}'
        }]}
E       AssertionError: assert {'notifications': [{'channel_id': -1,\n                    'dm_id': 1,\n                    'notification_message': 'sheriffwoody added you to '\n                                            'buzzlightyear, sheriffwoody'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear reacted to your '\n                                            'message in woodys toybox'}]} == {'notifications': [{'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear reacted to your '\n                                            'message in woodys toybox'}]}
E         Differing items:
E         {'notifications': [{'channel_id': -1, 'dm_id': 1, 'notification_message': 'sheriffwoody added you to buzzlightyear, sh...y'}, {'channel_id': 1, 'dm_id': -1, 'notification_message': 'buzzlightyear reacted to your message in woodys toybox'}]} != {'notifications': [{'channel_id': 1, 'dm_id': -1, 'notification_message': 'buzzlightyear reacted to your message in woodys toybox'}]}
E         Full diff:
E           {
E         -  'notifications': [{'channel_id': 1,
E         +  'notifications': [{'channel_id': -1,
E         ?                                   +
E         +                     'dm_id': 1,
E         +                     'notification_message': 'sheriffwoody added you to '
E         +                                             'buzzlightyear, sheriffwoody'},
E         +                    {'channel_id': 1,
E                               'dm_id': -1,
E                               'notification_message': 'buzzlightyear reacted to your '
E                                                       'message in woodys toybox'}],
E           }

http_tests/other_tests/test_notifications_get.py:248: AssertionError
_____________________ test_react_triggers_notification[dm] _____________________

dest = DM(owner=1, members=[2], name='buzzlightyear, sheriffwoody', dm_id=1)
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.o9u0BkCU2NC71jbMWivRKfGjP-oq9AUZt95pJRPOpCA', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to....eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjJ9.e0YwR8u7aimDKxpeEz5SswDytI1vQru3KNe0zwoWsV4', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear, sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f99115c1f28>
ctx = None

    @iteration3
    @pytest.mark.parametrize('dest', ['ch', 'dm'])
    def test_react_triggers_notification(dest, user_woody, user_buzz, woodys_public_toybox, woody_and_buzz_dm, message_factory, ctx):
        if dest == 'ch':
            channel_invite(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)
    
        dest = woodys_public_toybox if dest == 'ch' else woody_and_buzz_dm
    
        a_msg = message_factory(user_woody, dest)
    
        message_react(user_buzz.token, a_msg.message_id, 1, ctx)
    
        notifs = notifications_get(user_woody.token, ctx)
    
>       assert notifs == {'notifications': [{
            'channel_id': woodys_public_toybox.channel_id if dest == woodys_public_toybox else -1,
            'dm_id': woody_and_buzz_dm.dm_id if dest == woody_and_buzz_dm else -1,
            'notification_message': f'{user_buzz.handle_str} reacted to your message in {dest.name}'
        }]}
E       AssertionError: assert {'notifications': [{'channel_id': -1,\n                    'dm_id': 1,\n                    'notification_message': 'sheriffwoody added you to '\n                                            'buzzlightyear, sheriffwoody'},\n                   {'channel_id': -1,\n                    'dm_id': 1,\n                    'notification_message': 'buzzlightyear reacted to your '\n                                            'message in buzzlightyear, '\n                                            'sheriffwoody'}]} == {'notifications': [{'channel_id': -1,\n                    'dm_id': 1,\n                    'notification_message': 'buzzlightyear reacted to your '\n                                            'message in buzzlightyear, '\n                                            'sheriffwoody'}]}
E         Differing items:
E         {'notifications': [{'channel_id': -1, 'dm_id': 1, 'notification_message': 'sheriffwoody added you to buzzlightyear, sh..._id': -1, 'dm_id': 1, 'notification_message': 'buzzlightyear reacted to your message in buzzlightyear, sheriffwoody'}]} != {'notifications': [{'channel_id': -1, 'dm_id': 1, 'notification_message': 'buzzlightyear reacted to your message in buzzlightyear, sheriffwoody'}]}
E         Full diff:
E           {
E            'notifications': [{'channel_id': -1,
E         +                     'dm_id': 1,
E         +                     'notification_message': 'sheriffwoody added you to '
E         +                                             'buzzlightyear, sheriffwoody'},
E         +                    {'channel_id': -1,
E                               'dm_id': 1,
E                               'notification_message': 'buzzlightyear reacted to your '
E                                                       'message in buzzlightyear, '
E                                                       'sheriffwoody'}],
E           }

http_tests/other_tests/test_notifications_get.py:248: AssertionError
__________________ test_most_recent_20_notifications_fetched ___________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.o9u0BkCU2NC71jbMWivRKfGjP-oq9AUZt95pJRPOpCA', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to....eyJhdXRoX3VzZXJfaWQiOjIsInNlc3Npb25faWQiOjJ9.e0YwR8u7aimDKxpeEz5SswDytI1vQru3KNe0zwoWsV4', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f9911526840>
ctx = None

    @iteration3
    def test_most_recent_20_notifications_fetched(user_woody, user_buzz, woodys_public_toybox, message_factory, ctx):
        channel_invite(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)
    
        expected = {'notifications': []}
        for ix in range(30):
            content = f'@{user_woody.handle_str} {ix}'
            message_factory(user_buzz, woodys_public_toybox, content)
    
            if ix >= 10:
                expected['notifications'].insert(0, {
                    'channel_id': woodys_public_toybox.channel_id,
                    'dm_id': -1,
                    'notification_message': f'{user_buzz.handle_str} tagged you in {woodys_public_toybox.name}: {content[:20]}'
                })
    
        notifs = notifications_get(user_woody.token, ctx)
    
>       assert notifs == expected
E       AssertionError: assert {'notifications': [{'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 10'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 11'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 12'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 13'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 14'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 15'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 16'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 17'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 18'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 19'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 20'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 21'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 22'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 23'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 24'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 25'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 26'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 27'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 28'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 29'}]} == {'notifications': [{'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 29'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 28'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 27'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 26'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 25'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 24'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 23'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 22'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 21'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 20'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 19'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 18'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 17'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 16'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 15'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 14'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 13'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 12'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 11'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 10'}]}
E         Differing items:
E         {'notifications': [{'channel_id': 1, 'dm_id': -1, 'notification_message': 'buzzlightyear tagged you in woodys toybox: ...nnel_id': 1, 'dm_id': -1, 'notification_message': 'buzzlightyear tagged you in woodys toybox: @sheriffwoody 15'}, ...]} != {'notifications': [{'channel_id': 1, 'dm_id': -1, 'notification_message': 'buzzlightyear tagged you in woodys toybox: ...nnel_id': 1, 'dm_id': -1, 'notification_message': 'buzzlightyear tagged you in woodys toybox: @sheriffwoody 24'}, ...]}
E         Full diff:
E           {
E            'notifications': [{'channel_id': 1,
E                               'dm_id': -1,
E                               'notification_message': 'buzzlightyear tagged you in '
E         +                                             'woodys toybox: @sheriffwoody 10'},
E         +                    {'channel_id': 1,
E         +                     'dm_id': -1,
E         +                     'notification_message': 'buzzlightyear tagged you in '
E         +                                             'woodys toybox: @sheriffwoody 11'},
E         +                    {'channel_id': 1,
E         +                     'dm_id': -1,
E         +                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 29'},
E         ?                                                                            -
E         +                                             'woodys toybox: @sheriffwoody 12'},
E         ?                                                                           +
E         +                    {'channel_id': 1,
E         +                     'dm_id': -1,
E         +                     'notification_message': 'buzzlightyear tagged you in '
E         +                                             'woodys toybox: @sheriffwoody 13'},
E         +                    {'channel_id': 1,
E         +                     'dm_id': -1,
E         +                     'notification_message': 'buzzlightyear tagged you in '
E         +                                             'woodys toybox: @sheriffwoody 14'},
E         +                    {'channel_id': 1,
E         +                     'dm_id': -1,
E         +                     'notification_message': 'buzzlightyear tagged you in '
E         +                                             'woodys toybox: @sheriffwoody 15'},
E         +                    {'channel_id': 1,
E         +                     'dm_id': -1,
E         +                     'notification_message': 'buzzlightyear tagged you in '
E         +                                             'woodys toybox: @sheriffwoody 16'},
E         +                    {'channel_id': 1,
E         +                     'dm_id': -1,
E         +                     'notification_message': 'buzzlightyear tagged you in '
E         +                                             'woodys toybox: @sheriffwoody 17'},
E         +                    {'channel_id': 1,
E         +                     'dm_id': -1,
E         +                     'notification_message': 'buzzlightyear tagged you in '
E         +                                             'woodys toybox: @sheriffwoody 18'},
E         +                    {'channel_id': 1,
E         +                     'dm_id': -1,
E         +                     'notification_message': 'buzzlightyear tagged you in '
E         +                                             'woodys toybox: @sheriffwoody 19'},
E         +                    {'channel_id': 1,
E         +                     'dm_id': -1,
E         +                     'notification_message': 'buzzlightyear tagged you in '
E         +                                             'woodys toybox: @sheriffwoody 20'},
E         +                    {'channel_id': 1,
E         +                     'dm_id': -1,
E         +                     'notification_message': 'buzzlightyear tagged you in '
E         +                                             'woodys toybox: @sheriffwoody 21'},
E         +                    {'channel_id': 1,
E         +                     'dm_id': -1,
E         +                     'notification_message': 'buzzlightyear tagged you in '
E         +                                             'woodys toybox: @sheriffwoody 22'},
E         +                    {'channel_id': 1,
E         +                     'dm_id': -1,
E         +                     'notification_message': 'buzzlightyear tagged you in '
E         +                                             'woodys toybox: @sheriffwoody 23'},
E         +                    {'channel_id': 1,
E         +                     'dm_id': -1,
E         +                     'notification_message': 'buzzlightyear tagged you in '
E         +                                             'woodys toybox: @sheriffwoody 24'},
E         +                    {'channel_id': 1,
E         +                     'dm_id': -1,
E         +                     'notification_message': 'buzzlightyear tagged you in '
E         +                                             'woodys toybox: @sheriffwoody 25'},
E         +                    {'channel_id': 1,
E         +                     'dm_id': -1,
E         +                     'notification_message': 'buzzlightyear tagged you in '
E         +                                             'woodys toybox: @sheriffwoody 26'},
E         +                    {'channel_id': 1,
E         +                     'dm_id': -1,
E         +                     'notification_message': 'buzzlightyear tagged you in '
E         +                                             'woodys toybox: @sheriffwoody 27'},
E                              {'channel_id': 1,
E                               'dm_id': -1,
E                               'notification_message': 'buzzlightyear tagged you in '
E                                                       'woodys toybox: @sheriffwoody 28'},
E                              {'channel_id': 1,
E                               'dm_id': -1,
E                               'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 27'},
E         ?                                                                            ^
E         +                                             'woodys toybox: @sheriffwoody 29'}],
E         ?                                                                            ^  +
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 26'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 25'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 24'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 23'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 22'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 21'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 20'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 19'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 18'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 17'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 16'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 15'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 14'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 13'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 12'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 11'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 10'}],
E           }

http_tests/other_tests/test_notifications_get.py:297: AssertionError
__________________ test_search_includes_only_joined_channels ___________________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to....eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.o9u0BkCU2NC71jbMWivRKfGjP-oq9AUZt95pJRPOpCA', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[2], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f9911526e18>
ctx = None

    @iteration3
    def test_search_includes_only_joined_channels(user_buzz, woodys_public_toybox, message_factory, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
        message_factory(user_buzz, woodys_public_toybox, 'anything')
    
        channel_leave(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
        msgs = search(user_buzz.token, 'any', ctx)
    
>       assert msgs['messages'] == []
E       AssertionError: assert [{'is_pinned': False,\n  'message': 'anything',\n  'message_id': 2,\n  'reacts': [{'is_this_user_reacted': False, 'react_id': 1, 'u_ids': []}],\n  'time_sent': 1650395406,\n  'u_id': 1}] == []
E         Left contains one more item: {'is_pinned': False, 'message': 'anything', 'message_id': 2, 'reacts': [{'is_this_user_reacted': False, 'react_id': 1, 'u_ids': []}], ...}
E         Full diff:
E           [
E         -  ,
E         +  {'is_pinned': False,
E         +   'message': 'anything',
E         +   'message_id': 2,
E         +   'reacts': [{'is_this_user_reacted': False,
E         +               'react_id': 1,
E         +               'u_ids': []}],
E         +   'time_sent': 1650395406,
E         +   'u_id': 1},
E           ]

http_tests/other_tests/test_search.py:102: AssertionError
___________________________ test_return_type_correct ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...9.eyJhdXRoX3VzZXJfaWQiOjEsInNlc3Npb25faWQiOjF9.o9u0BkCU2NC71jbMWivRKfGjP-oq9AUZt95pJRPOpCA', handle_str='sheriffwoody')
ctx = None

    @iteration3
    def test_return_type_correct(user_woody, ctx):
        stats = user_stats(user_woody.token, ctx)
    
        assert 'user_stats' in stats
        stats = stats['user_stats']
    
        assert 'channels_joined' in stats and isinstance(stats['channels_joined'], list)
        assert stats['channels_joined'][-1]['num_channels_joined'] == 0
        assert abs(stats['channels_joined'][-1]['time_stamp'] - utc_now()) <= 2
    
        assert 'dms_joined' in stats and isinstance(stats['dms_joined'], list)
        assert stats['dms_joined'][-1]['num_dms_joined'] == 0
        assert abs(stats['dms_joined'][-1]['time_stamp'] - utc_now()) <= 2
    
        assert 'messages_sent' in stats and isinstance(stats['messages_sent'], list)
        assert stats['messages_sent'][-1]['num_messages_sent'] == 0
        assert abs(stats['messages_sent'][-1]['time_stamp'] - utc_now()) <= 2
    
>       assert 'involvement_rate' in stats and isinstance(stats['involvement_rate'], float)
E       AssertionError: assert ('involvement_rate' in {'channels_joined': [{'num_channels_joined': 0, 'time_stamp': 1650395432}], 'dms_joined': [{'num_dms_joined': 0, 'time_stamp': 1650395432}], 'involvement_rate': 0, 'messages_sent': [{'num_messages_sent': 0, 'time_stamp': 1650395432}]} and False)
E        +  where False = isinstance(0, float)

http_tests/stats_tests/test_user_stats.py:38: AssertionError
=========================== short test summary info ============================
FAILED http_tests/admin_tests/test_admin_userpermission_change.py::test_successful_permission_change
FAILED http_tests/auth_tests/test_passwordreset_request.py::test_return_format_correct
FAILED http_tests/channel_tests/test_channel_addowner.py::test_non_member_cannot_add_owner
FAILED http_tests/channel_tests/test_channel_addowner.py::test_global_owner_non_member_cant_addowner_private
FAILED http_tests/channel_tests/test_channel_addowner.py::test_global_owner_non_member_cant_addowner_public
FAILED http_tests/dm_tests/test_dm_messages.py::test_removal_by_edit_reflected
FAILED http_tests/dm_tests/test_dm_messages.py::test_removal_by_deletion_reflected
FAILED http_tests/message_tests/test_message_edit.py::test_original_poster_can_edit_message_dm
FAILED http_tests/message_tests/test_message_edit.py::test_owner_can_edit_members_message_dm
FAILED http_tests/message_tests/test_message_edit.py::test_global_owner_cant_edit_members_message_dm
FAILED http_tests/message_tests/test_message_meta.py::test_message_ids_unique_iter3
FAILED http_tests/message_tests/test_message_pin.py::test_dm_member_cant_pin
FAILED http_tests/message_tests/test_message_pin.py::test_global_owner_cant_pin_in_dm
FAILED http_tests/message_tests/test_message_remove.py::test_global_owner_cant_remove_members_message_dm
FAILED http_tests/message_tests/test_message_sendlaterdm.py::test_invalid_returned_id_until_sent
FAILED http_tests/message_tests/test_message_share.py::test_successful_share_to_dm
FAILED http_tests/message_tests/test_message_share.py::test_successful_cross_share[True]
FAILED http_tests/message_tests/test_message_share.py::test_successful_cross_share[False]
FAILED http_tests/message_tests/test_message_share.py::test_cannot_share_from_unjoined_dm
FAILED http_tests/message_tests/test_message_unpin.py::test_global_owner_cant_unpin_in_dm
FAILED http_tests/other_tests/test_clear.py::test_clear_works - Exception: <R...
FAILED http_tests/other_tests/test_notifications_get.py::test_tag_not_in_channel
FAILED http_tests/other_tests/test_notifications_get.py::test_multiple_tags
FAILED http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_senddm_triggers_notification
FAILED http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_sendlaterdm_triggers_notification
FAILED http_tests/other_tests/test_notifications_get.py::test_react_triggers_notification[ch]
FAILED http_tests/other_tests/test_notifications_get.py::test_react_triggers_notification[dm]
FAILED http_tests/other_tests/test_notifications_get.py::test_most_recent_20_notifications_fetched
FAILED http_tests/other_tests/test_search.py::test_search_includes_only_joined_channels
FAILED http_tests/stats_tests/test_user_stats.py::test_return_type_correct - ...
================== 30 failed, 344 passed in 144.69s (0:02:24) ==================
